{% extends 'base.html.twig' %}

{% block body %}

    <div class="container-fluid">
        <div class="row justify-content-md-center mt-3">
            <div class="col col-lg-9">
                {% for item in photos %}

                    <div class="">
                        <a href="{{ path('app.photo', {'uuid': item.item.uuid}) }}">
                            <img src="/media/{{ item.item.file }}" alt="" />
                            {% for mark in item.marks %}
                                <div class="rect passive-rect rect-type-{{ mark.element.id }}"
                                     style="display: block;top: {{ mark.position.top }}%; left: {{ mark.position.left }}%; width: {{ mark.position.width }}%; height: {{ mark.position.height }}%; border-color: {{ mark.element.color }}"></div>
                            {% endfor %}
                        </a>
                    </div>
                    {#<div style="display: flex;">
                        <a href="{{ path('app.photo', {'uuid': item.item.uuid}) }}">
                            <img src="/media/{{ item.item.file }}" alt=""/>
                            {% for mark in item.marks %}
                                <div class="rect passive-rect rect-type-{{ mark.element.id }}"
                                     style="display: block;top: {{ mark.position.top }}%; left: {{ mark.position.left }}%; width: {{ mark.position.width }}%; height: {{ mark.position.height }}%; border-color: {{ mark.element.color }}"></div>
                            {% endfor %}
                        </a>
                    </div>#}

                {% endfor %}
            </div>
            <div class="col col-lg-3">
                <div id="map" style="position: relative; height: 300px;"></div>
                <p class="mt-3">{{ center.x }}, {{ center.y }}</p>

                <a class="btn btn-info btn-sm" href="{{ path('app.objects.download.one', {'uuid': worldObject.uuid}) }}" target="_blank"><i class="fas fa-download"></i> Свали GeoJson</a>

                <ul class="mt-3">
                    <li><a href="http://maps.google.com/maps?q={{ center.x }},{{ center.y }}" target="_blank"><i class="fas fa-map-marker-alt"></i> Виж в maps</a></li>
                    <li><a href="http://maps.google.com/maps?q=&layer=c&cbll={{ center.x }},{{ center.y }}&cbp=11,0,0,0,0" target="_blank"><i class="fas fa-map-marker-alt"></i> Виж в street view</a></li>
                </ul>

                <h5>Елементи</h5>
                <ul class="ml-3" style="list-style-type: disc;">
                {% for attribute in attributes %}
                    <li>{{ attribute.element.name }}</li>
                {% endfor %}
                </ul>

                <script>
                    var redIcon = new L.Icon({
                        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                        shadowSize: [41, 41]
                    });

                    var blueIcon = new L.Icon({
                        iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
                        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                        shadowSize: [41, 41]
                    });

                    function activateMarker(markerId) {
                        // deactivateAllMarkers();

                        var marker = markers[markerId];
                        marker.setIcon(redIcon);
                        marker.dragging.enable();
                        // marker.unbindPopup();
                    }

                    function selectMarker(markerId) {
                        var marker = markers[markerId];
                        marker.setIcon(redIcon);
                        // marker.unbindPopup();
                    }

                    function goToMarker(markerId) {
                        window.location.href = '/objects/' + markerId;
                    }

                    function goToAllMarkers() {
                        window.location.href = '';
                    }

                    function deactivateMarker(marker, markerId) {
                        marker.setIcon(blueIcon);
                        marker.dragging.disable();

                        // marker.bindPopup("<b>Marker info!</b><br /><button onclick=\"goToMarker('" + markerId + "')\">Activate</button>")/*.openPopup()*/;
                    }

                    function deactivateAllMarkers() {
                        Object.keys(markers).forEach(index => {
                            deactivateMarker(markers[index], index);
                        });
                        map.closePopup();
                    }


                    function createMarker(position, markerId) {
                        // marker ias active by default on create
                        var marker = new L.marker(position, {
                            icon: redIcon,
                            draggable: 'true'
                        });

                        marker.on('dragend', function (event) {
                            onDrag(marker);
                        });

                        if (markerId) {
                            marker.on('click', function (event) {
                                goToMarker(markerId);
                            });

                        }

                        return marker;
                    }

                    function saveMarker() {
                        $('.add-point-form').submit();
                    }

                    let geoJSON;
                    let markers = {};
                    let map;

                    function mapInit(coordinates) {
                        let map = L.map('map').setView(coordinates, 17);
                        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
                            //  L.tileLayer('https://gradska-sreda.dreamradio.org/map/styles/vs/{z}/{x}/{y}.png', {
                            maxZoom: 18,
                            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                                '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                                'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                            id: 'mapbox.streets'
                        }).addTo(map);

                        return map;
                    }

                    $.ajax({
                        url: '/api/map',
                        type: 'GET',
                        success: geojsonFeatures => {
                            geoJSON = geojsonFeatures;
                            createMarkersFromGeoJSON();

                            let mapCenter = [{{ center.x }}, {{ center.y }}];

                            map = mapInit(mapCenter);

                            Object.keys(markers).forEach(i => {
                                map.addLayer(markers[i]);
                            });

                            deactivateAllMarkers();

                            selectMarker('{{ worldObject.uuid }}');

                        }
                    });

                    function createMarkersFromGeoJSON() {
                        markers = [];
                        geoJSON.forEach(feature => {
                            var markerId = feature.properties.id;
                            markers[markerId] = createMarker(feature.geometry.coordinates, markerId);
                        });
                    }

                    // add pointer button clicked
                    function addMarker() {
                        deactivateAllMarkers();

                        var mapCenter = map.getCenter();
                        markers['new'] = createMarker(mapCenter);
                        map.addLayer(markers['new']);

                        attachCoordinatesToMarkerForm(mapCenter);
                        showNewMarkerAddButton();
                    }

                    function clearMarker() {
                        map.removeLayer(markers['new']);
                        delete markers['new'];
                        clearCoordinatesToMarkerForm();
                        hideNewMarkerAddButton();
                    }
                </script>

            </div>
        </div>
    </div>
{% endblock %}
