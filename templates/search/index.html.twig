{% extends 'base.html.twig' %}

{% block body %}
    <div class="container">
        <div class="section pb-5 ">
            {{ form_start(form, {'attr': {'novalidate': 'novalidate', 'class': 'search-form'}}) }}
            <div class="form-row align-items-center itemType">
                <div class="col-auto my-1">
                    <div class="select">
                        {{ form_widget(form.element, {'id': 'select-element-form'}) }}
                    </div>
                </div>
                <div class="col-auto my-1">
                    <a class="button text-white btn-primary" id="submit-button" onclick="searchObjects()">Търси</a>
                    <button type="submit" name="clear" class="button btn-default" >Изчисти</button>
                    <a href="{{ path('app.export.search') }}" target="_blank" class="button text-white btn-info ml-3">Вземи GeoJSON</a>
                </div>
            </div>
            {{ form_end(form) }}
        </div>
    </div>

    <div class="container-fluid p-0">
        <div id="search-map" style="width: 100%; height: calc(100vh - 300px);"></div>
    </div>

    <script>
        let blueIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        function goToMarker(markerId) {
            window.location.href = '/objects/' + markerId;
        }

        function createMarker(position, markerId) {
            // marker ias actibe by default on create
            let marker = new L.marker(position, {
                icon: blueIcon,
                draggable: 'false'
            });

            marker.on('dragend', function (event) {
                onDrag(marker);
            });

            if (markerId) {
                marker.on('click', function (event) {
                    goToMarker(markerId);
                });
            }
            map.addLayer(marker);

            return marker;
        }

        let geoJSON;
        let markers = {};
        let map;

        function mapInit(coordinates) {
            let map = L.map('search-map').setView(coordinates, 14);

            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
                maxZoom: 18,
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                    '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                id: 'mapbox.streets'
            }).addTo(map);

            return map;
        }

        function searchObjects() {
            let valid = true;
            let elementVal = $('.search-form .itemType select').val();

            if (!elementVal) {
                $('.search-form .itemType .select').addClass('is-danger');
                valid = false;
            }

            if (valid) {
                loadObjects(elementVal);
            }
        }

        function loadObjects(elementVal) {
            if (map) {
                map.remove();
            }

            $.ajax({
                url: '/api/search?element=' + elementVal,
                type: 'GET',
                success: geojsonFeatures => {
                    geoJSON = geojsonFeatures;
                    map = mapInit(geojsonFeatures[0].geometry.coordinates);
                    createMarkersFromGeoJSON();
                }
            });
        }

        function createMarkersFromGeoJSON() {
            markers = [];
            geoJSON.forEach(feature => {
                let markerId = feature.properties.id;
                markers[markerId] = createMarker(feature.geometry.coordinates, markerId);
            });
        }

        {% if selected is not null %}
            loadObjects({{ selected }});
        {% endif %}
    </script>

{% endblock %}
