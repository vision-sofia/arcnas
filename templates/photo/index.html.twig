{% extends 'base.html.twig' %}

{% block body %}
    <div class="body-wrapper">
        <div class="photo-panel">
            <div class="photo-panel-position-wrapper">
                <div class="photo-wrapper">
                    <img src="/media/{{ photo.file }}"
                         onmousedown="photoCtrl.onMouseDown(event, this)"
                         ondrag="photoCtrl.onDrag(event, this)"
                         ondragend="photoCtrl.onMouseUp(event, this)"
                         onload="photoCtrl.onLoad()"
                         alt="" />

                    {% for mark in marks %}
                        <div class="rect passive-rect rect-type-{{ mark.element.id }}" style="top: {{ mark.position.top }}%; left: {{ mark.position.left }}%; width: {{ mark.position.width }}%; height: {{ mark.position.height }}%; border-color: {{ mark.element.color }}"></div>
                    {% endfor %}

                    <div class="rect active-rect"></div>
                </div>
            </div>
        </div>
        <div class="action-panel">
            {% if is_granted('IS_AUTHENTICATED_REMEMBERED') %}
                <div style="margin-bottom: 30px;">

                    <div id="map" style="position: relative; height: 300px;"></div>

                    {% if worldObject.uuid is not defined %}
                        <a class="button is-warning mtb10"
                           id="add-marker-button"
                           onclick="addMarker()">Създай нов маркер</a>

                        {{ form_start(worldObjectForm, {'attr': {'class': 'add-point-form', 'style': 'display: inline' ,'novalidate': 'novalidate'}}) }}
                        {{ form_widget(worldObjectForm.coordinates, {'id': 'new_point_coordinates', 'attr': {'class': 'form-control'}}) }}
                        {#<button type="submit">Запази</button>#}
                        <a class="button is-danger mtb10"
                           id="save-marker-button"
                           style="display: none"
                           onclick="saveMarker()">Запази</a>
                        <a class="button is-light mtb10"
                           id="clear-marker-button"
                           style="display: none"
                           onclick="clearMarker()">Отказ</a>
                        {{ form_end(worldObjectForm) }}
                    {% else %}
                        <a class="button is-light mtb10"
                           onclick="goToAllMarkers()">Назад към всички маркери</a>
                    {% endif %}
                </div>

                {% if form is defined %}
                {{ form_start(form, {'action': '', 'attr': {'class': 'g-py-15 add-item-form', 'novalidate': 'novalidate'}}) }}

                {% if worldObject.id is defined %}
                {{ form_widget(form.coordinates, {'id': 'coordinates', 'attr': { 'hidden': 'hidden'}}) }}



                        <div class="itemType">
                            <label class="label">Тип на обекта</label>
                            <div class="control has-icons-left">
                                <div class="select">
                                    {{ form_widget(form.element, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                <span class="icon is-small is-left"><i class="fas fa-building"></i></span>
                            </div>
                        </div>

                    {#<div class="column is-half">
                        <div class="itemCondition">
                            <label class="label">Състояние</label>
                            <div class="control has-icons-left">
                                <div class="select">
                                    {{ form_widget(form.condition, {'attr': {'class': 'form-control'}}) }}
                                </div>
                                <span class="icon is-small is-left"><i class="fas fa-highlighter"></i></span>
                            </div>
                        </div>
                    </div>#}


                {#<button type="submit">test</button>#}
                <a class="button is-warning mtb10"
                   id="submit-button"
                   onclick="photoCtrl.addItem()"
                   disabled>Добави</a>
                <a class="button is-light mtb10"
                   id="clear-button"
                   style="display: none"
                   onclick="photoCtrl.clearSelection()">Изчисти</a>

                {{ form_end(form) }}
                {% endif %}
                <hr />
            {% endif %}

            <aside class="menu items" style="margin-top: 24px;">
                <p class="menu-label">Отбелязани обекти</p>
                <ul class="menu-list">
                    {% for element in markedElements %}
                        {% if elementsCount[element.id] is defined %}
                            <li id="item-{{ element.id }}"
                                onmouseover="rectCtrl.showPassiveRects({{ element.id }})"
                                onmouseleave="rectCtrl.hidePassiveRects({{ element.id }})">
                                <a>
                                    <span class="tag item-color-mark" style="color: {{ element.color }};">&bull;</span>
                                    {{ element.name }}
                                    <span class="tag is-light"> {{ element.count }} </span>
                                    {% if areas[element.id] is defined and areas[element.id] is not empty %}
                                        <span class="is-light">(площ {{ areas[element.id] }}%)</span>
                                    {% endif %}
                                </a>
                            </li>
                        {% endif %}
                    {% endfor %}
                </ul>
                <a class="button is-text"
                   onmouseover="rectCtrl.showAllPassiveRects()"
                   onmouseleave="rectCtrl.hideAllPassiveRects()">Покажи всички</a>

            </aside>
            {% endif %}

        </div>
    </div>

    {% if is_granted('IS_AUTHENTICATED_REMEMBERED') %}
    <script>

        var redIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var blueIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        function onDrag(marker) {
            var position = marker.getLatLng();
            attachCoordinatesToMarkerForm(position);
            showNewMarkerAddButton();
        }

        function attachCoordinatesToMarkerForm(position) {
            var coordinates = position.lat + ',' + position.lng;
            $('#new_point_coordinates').val(coordinates);
            $('#coordinates').val(coordinates);
        }

        function clearCoordinatesToMarkerForm() {
            $('#new_point_coordinates').val('');
            $('#coordinates').val('');
        }

        function showNewMarkerAddButton() {
            $('#add-marker-button').hide();
            $('#save-marker-button').show();
            $('#clear-marker-button').show();
        }

        function hideNewMarkerAddButton() {
            $('#add-marker-button').show();
            $('#save-marker-button').hide();
            $('#clear-marker-button').hide();
        }

        function activateMarker(markerId) {
            // deactivateAllMarkers();

            var marker = markers[markerId];
            marker.setIcon(redIcon);
            marker.dragging.enable();
            // marker.unbindPopup();
        }

        function selectMarker(markerId) {
            var marker = markers[markerId];
            marker.setIcon(redIcon);
            // marker.unbindPopup();
        }

        function goToMarker(markerId) {
            window.location.href = '/photos/{{ photo.uuid }}/' + markerId;
        }

        function goToAllMarkers() {
            window.location.href = '/photos/{{ photo.uuid }}';
        }

        function deactivateMarker(marker, markerId) {
            marker.setIcon(blueIcon);
            marker.dragging.disable();

            // marker.bindPopup("<b>Marker info!</b><br /><button onclick=\"goToMarker('" + markerId + "')\">Activate</button>")/*.openPopup()*/;
        }

        function deactivateAllMarkers() {
            Object.keys(markers).forEach(index => {
                deactivateMarker(markers[index], index);
            });
            map.closePopup();
        }

        function createMarker(position, markerId) {
            // marker ias active by default on create
            var marker = new L.marker(position, {
                icon: redIcon,
                draggable: 'true'
            });

            marker.on('dragend', function(event) {
                onDrag(marker);
            });

            if (markerId) {
                marker.on('click', function(event) {
                    goToMarker(markerId);
                });

            }

            return marker;
        }

        function saveMarker() {
            $('.add-point-form').submit();
            return;
        }

        var geoJSON;
        var markers = {};
        var map;

        function mapInit(coordinates) {
            var map = L.map('map').setView(coordinates, 13);
            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
          //  L.tileLayer('https://gradska-sreda.dreamradio.org/map/styles/vs/{z}/{x}/{y}.png', {
                maxZoom: 18,
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                    '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                id: 'mapbox.streets'
            }).addTo(map);

            return map;
        }

        $.ajax({
            url: '/api/map',
            type: 'GET',
            success: geojsonFeatures => {
                geoJSON = geojsonFeatures;
                createMarkersFromGeoJSON();

                let mapCenter = [42.697687,23.3209635];

                {%  if worldObject.uuid is defined %}
                    let initCoordinates = markers['{{ worldObject.uuid }}'].getLatLng();
                    mapCenter = initCoordinates;
                {%  else %}

                if(!geojsonFeatures) {
                    mapCenter = geojsonFeatures[0].geometry.coordinates.reverse();
                }

                {%  endif %}
                console.log(mapCenter);
                map = mapInit(mapCenter);

                Object.keys(markers).forEach(i => {
                    map.addLayer(markers[i]);
                });
                deactivateAllMarkers();

                {% if worldObject.uuid is defined %}
                selectMarker('{{ worldObject.uuid }}');
                {% endif %}
            }
        });

        function createMarkersFromGeoJSON() {
            markers = [];
            geoJSON.forEach(feature => {
                var markerId = feature.properties.id;
                markers[markerId] = createMarker(feature.geometry.coordinates, markerId);
            });
        }

        // add pointer button clicked
        function addMarker() {
            deactivateAllMarkers();

            var mapCenter = map.getCenter();
            markers['new'] = createMarker(mapCenter);
            map.addLayer(markers['new']);

            attachCoordinatesToMarkerForm(mapCenter);
            showNewMarkerAddButton();
        }

        function clearMarker() {
            map.removeLayer(markers['new']);
            delete markers['new'];
            clearCoordinatesToMarkerForm();
            hideNewMarkerAddButton();
        }
    </script>
    {% endif %}
{% endblock %}
